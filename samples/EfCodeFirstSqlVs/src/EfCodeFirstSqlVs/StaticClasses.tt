<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".generated.cs" #>
<#@ Assembly Name="EnvDTE.dll" #>
<#@ Assembly Name="System.Data" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
    string[] tableNames = new string[] { "UniqueClasses" };	
    string path = Path.GetDirectoryName(Host.TemplateFile);
    string columnId = "Id";
    string columnName = "Name";
    string connectionString = "Server=(localdb)\\mssqllocaldb;Database=T4EnumGenerator.EfCodeFirstSqlVs.SampleDb;Trusted_Connection=True;";

	// Get containing project
	IServiceProvider serviceProvider = (IServiceProvider)Host;
	DTE dte = (DTE)serviceProvider.GetService(typeof(DTE));
	Project project = dte.Solution.FindProjectItem(Host.TemplateFile).ContainingProject;
#>
using System;
using System.CodeDom.Compiler;

namespace <#=System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint").ToString()#>.StaticClasses
{
<#
	foreach (string tableName in tableNames)
	{
#>
	/// <summary>
	/// <#= tableName #> auto generated enumeration
    /// </summary>
    [GeneratedCode("TextTemplatingFileGenerator", "11")]
    public static class <#= tableName #>
    { 
<#
    SqlConnection conn = new SqlConnection(connectionString);
    string command = string.Format("select {0}, {1} from {2} order by {0}", columnId, columnName, tableName);
    SqlCommand comm = new SqlCommand(command, conn);
    conn.Open();
    SqlDataReader reader = comm.ExecuteReader();
    bool loop = reader.Read();
    while(loop)
    {
#>      
        public static readonly Guid <#= Pascalize(reader[columnName]) #> = new Guid("<#= reader[columnId] #>");<# loop = reader.Read(); #>
<#
    }
	}
#>  
	}
}
<#+
    private string Pascalize(object value)
    {
		Regex rx = new Regex(@"(?:[^a-zA-Z0-9]*)(?<first>[a-zA-Z0-9])(?<reminder>[a-zA-Z0-9]*)(?:[^a-zA-Z0-9]*)");
        return rx.Replace(value.ToString(), m => m.Groups["first"].ToString().ToUpper() + m.Groups["reminder"].ToString().ToLower());
    }
#>